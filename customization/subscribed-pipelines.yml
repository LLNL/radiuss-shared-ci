###############################################################################
# Copyright (c) 2022-23, Lawrence Livermore National Security, LLC and RADIUSS
# project contributors. See the COPYRIGHT file for details.
#
# SPDX-License-Identifier: (MIT)
###############################################################################

# The template job to test whether a machine is up.
# Expects CI_MACHINE defined to machine name.
.machine-check:
  stage: prerequisites
  tags: [shell, oslic]
  variables:
    GIT_STRATEGY: none
  script:
    - |
      if [[ $(jq '.[env.CI_MACHINE].total_nodes_up' /usr/global/tools/lorenz/data/loginnodeStatus) == 0 ]]
      then
        echo -e "\e[31mNo node available on ${CI_MACHINE}\e[0m"
        curl --url "https://api.github.com/repos/${GITHUB_PROJECT_ORG}/${GITHUB_PROJECT_NAME}/statuses/${CI_COMMIT_SHA}" \
             --header 'Content-Type: application/json' \
             --header "authorization: Bearer ${GITHUB_TOKEN}" \
             --data "{ \"state\": \"failure\", \"target_url\": \"${CI_PIPELINE_URL}\", \"description\": \"GitLab ${CI_MACHINE} down\", \"context\": \"ci/gitlab/${CI_MACHINE}\" }"
        exit 1
      fi

## [Shared jobs scenario]
## The job list can be imported from the .gitlab/jobs/<machine>.yml file, which
## is the default behavior of RADIUSS Shared CI. Or the list can be generated,
## allowing more complex setups, like sharing a list of jobs like we do with
## RADIUSS Spack Configs. Below is an example # job that concatenates jobs from
## two sources.
## (See Umpire CI setup for an example).
#
## One job to generate the job list for all the subpipelines
#generate-job-lists:
#  stage: prerequisites
#  tags: [shell, oslic]
#  variables:
#    LOCAL_JOBS_PATH: ".gitlab/jobs"
#    REMOTE_JOBS_PATH: "<remote/jobs/path>"
#  script:
#    - cat ${LOCAL_JOBS_PATH}/ruby.yml ${REMOTE_JOBS_PATH}/ruby.yml > ruby-jobs.yml
#    - cat ${LOCAL_JOBS_PATH}/poodle.yml ${REMOTE_JOBS_PATH}/poodle.yml > poodle-jobs.yml
#    - cat ${LOCAL_JOBS_PATH}/lassen.yml ${REMOTE_JOBS_PATH}/lassen.yml > lassen-jobs.yml
#    - cat ${LOCAL_JOBS_PATH}/corona.yml ${REMOTE_JOBS_PATH}/corona.yml > corona-jobs.yml
#    - cat ${LOCAL_JOBS_PATH}/tioga.yml ${REMOTE_JOBS_PATH}/tioga.yml > tioga-jobs.yml
#  artifacts:
#    paths:
#      - ruby-jobs.yml
#      - poodle-jobs.yml
#      - lassen-jobs.yml
#      - corona-jobs.yml
#      - tioga-jobs.yml

###
# Trigger a build-and-test pipeline for a machine.
# Comment the jobs for machines you donâ€™t need.
###

# RUBY
ruby-up-check:
  variables:
    CI_MACHINE: "ruby"
  extends: [.machine-check]

ruby-build-and-test:
  variables:
    CI_MACHINE: "ruby"
  needs: [ruby-up-check]
  ## [Shared jobs scenario]
  ## (See Umpire CI setup for an example).
  #needs: [ruby-up-check, generate-job-lists]
  extends: [.build-and-test]

# POODLE
poodle-up-check:
  variables:
    CI_MACHINE: "poodle"
  extends: [.machine-check]

poodle-build-and-test:
  variables:
    CI_MACHINE: "poodle"
  needs: [poodle-up-check]
  ## [Shared jobs scenario]
  ## (See Umpire CI setup for an example).
  #needs: [poodle-up-check, generate-job-lists]
  extends: [.build-and-test]

# DANE
dane-up-check:
  variables:
    CI_MACHINE: "dane"
  extends: [.machine-check]

dane-build-and-test:
  variables:
    CI_MACHINE: "dane"
  needs: [poodle-up-check]
  ## [Shared jobs scenario]
  ## (See Umpire CI setup for an example).
  #needs: [dane-up-check, generate-job-lists]
  extends: [.build-and-test]

# CORONA
corona-up-check:
  variables:
    CI_MACHINE: "corona"
  extends: [.machine-check]

corona-build-and-test:
  variables:
    CI_MACHINE: "corona"
  needs: [corona-up-check]
  ## [Shared jobs scenario]
  ## (See Umpire CI setup for an example).
  #needs: [corona-up-check, generate-job-lists]
  extends: [.build-and-test]

# TIOGA
tioga-up-check:
  variables:
    CI_MACHINE: "tioga"
  extends: [.machine-check]

tioga-build-and-test:
  variables:
    CI_MACHINE: "tioga"
  needs: [tioga-up-check]
  ## [Shared jobs scenario]
  ## (See Umpire CI setup for an example).
  #needs: [tioga-up-check, generate-job-lists]
  extends: [.build-and-test]

# LASSEN
lassen-up-check:
  variables:
    CI_MACHINE: "lassen"
  extends: [.machine-check]

lassen-build-and-test:
  variables:
    CI_MACHINE: "lassen"
  needs: [lassen-up-check]
  ## [Shared jobs scenario]
  ## (See Umpire CI setup for an example).
  #needs: [lassen-up-check, generate-job-lists]
  extends: [.build-and-test]



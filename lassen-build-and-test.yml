##############################################################################
# Copyright (c) 2022, Lawrence Livermore National Security, LLC and RADIUSS
# project contributors. See the COPYRIGHT file for details.
#
# SPDX-License-Identifier: (MIT)
##############################################################################

stages:
  - status_initiate
  - build_and_test
  - status_update

##############################################################################
# LASSEN
.on_lassen:
  tags:
    - shell
    - lassen
  rules:
    # Runs except if we explicitly deactivate corona by variable.
    - if: '$ON_LASSEN == "OFF"'
      when: never
    # Advanced jobs can only run on master, develop or if ALL_TARGETS is ON.
    # Set ADVANCED_JOB to ON in the job definition to make it an advanced job.
    - if: '$ADVANCED_JOB == "ON" && $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != "develop" && $ALL_TARGETS != "ON"'
      when: never
    # Only report failure if the pipeline failed.
    - if: '$CI_JOB_NAME =~ /status_failure/'
      when: on_failure
    # A true statement is expected to allow jobs to run. Here is the default.
    - when: on_success

.status_report: &status_report
    - export context="lassen"
    - |
      curl --url "https://api.github.com/repos/LLNL/${CI_PROJECT_NAME}/statuses/${CI_COMMIT_SHA}" \
           --header 'Content-Type: application/json' \
           --header "authorization: Bearer ${GITHUB_TOKEN}" \
           --data "{ \"state\": \"${pipeline_status}\", \"target_url\": \"${CI_PIPELINE_URL}\", \"description\": \"GitLab ${context} pipeline\", \"context\": \"ci/gitlab/${context}\" }"

.build_and_test_on_lassen:
  extends: [.custom_build_and_test, .on_lassen]
  stage: build_and_test
  script:
    - lalloc ${LASSEN_BUILD_AND_TEST_JOB_ALLOC} scripts/gitlab/build_and_test.sh

status_pending:
  extends: [.on_lassen]
  stage: status_initiate
  script:
    - export pipeline_status="pending"
    - *status_report

# Gitlab jobs for the lassen machine at LLNL.

# CPU only.
ibm_clang_9:
  variables:
    SPEC: "${PROJECT_LASSEN_VARIANTS} %clang@ibm.9.0.0 ${PROJECT_LASSEN_DEPS}"
  extends: .build_and_test_on_lassen

ibm_clang_9_gcc_8:
  variables:
    SPEC: "${PROJECT_LASSEN_VARIANTS} %clang@ibm.9.0.0 cxxflags=\"--gcc-toolchain=/usr/tce/packages/gcc/gcc-8.3.1\" cflags=\"--gcc-toolchain=/usr/tce/packages/gcc/gcc-8.3.1\" ${PROJECT_LASSEN_DEPS}"
  extends: .build_and_test_on_lassen

gcc_8_3_1:
  variables:
    SPEC: "${PROJECT_LASSEN_VARIANTS} %gcc@8.3.1 ${PROJECT_LASSEN_DEPS}"
  extends: .build_and_test_on_lassen

pgi_20_4_gcc_8_3_1:
  variables:
    SPEC: "${PROJECT_LASSEN_VARIANTS} %pgi@20.4 cxxflags=\"--gcc-toolchain=/usr/tce/packages/gcc/gcc-8.3.1\" cflags=\"--gcc-toolchain=/usr/tce/packages/gcc/gcc-8.3.1\" ${PROJECT_LASSEN_DEPS}"
  extends: .build_and_test_on_lassen

xl_16_1_1_10:
  variables:
    SPEC: "${PROJECT_LASSEN_VARIANTS} %xl@16.1.1.10 ${PROJECT_LASSEN_DEPS}"
  extends: .build_and_test_on_lassen

xl_16_1_1_10_gcc_8_3_1:
  variables:
    SPEC: "${PROJECT_LASSEN_VARIANTS} %xl@16.1.1.10 cxxflags=\"--gcc-toolchain=/usr/tce/packages/gcc/gcc-8.3.1\" cflags=\"--gcc-toolchain=/usr/tce/packages/gcc/gcc-8.3.1\" ${PROJECT_LASSEN_DEPS}"
  extends: .build_and_test_on_lassen

# CUDA.
ibm_clang_9_gcc_8_cuda:
  variables:
    SPEC: "${PROJECT_LASSEN_VARIANTS} +cuda %clang@ibm.9.0.0 cxxflags=\"--gcc-toolchain=/usr/tce/packages/gcc/gcc-8.3.1\" cflags=\"--gcc-toolchain=/usr/tce/packages/gcc/gcc-8.3.1\" ^cuda@10.1.168 ${PROJECT_LASSEN_DEPS}"
  extends: .build_and_test_on_lassen

xl_16_1_1_10_cuda:
  variables:
    SPEC: "${PROJECT_LASSEN_VARIANTS} +cuda %xl@16.1.1.10 cxxflags=\"--gcc-toolchain=/usr/tce/packages/gcc/gcc-7.3.1\" cflags=\"--gcc-toolchain=/usr/tce/packages/gcc/gcc-7.3.1\" ^cuda@10.1.168 ^cmake@3.14.5 ${PROJECT_LASSEN_DEPS}"
  extends: .build_and_test_on_lassen

xl_16_1_1_10_gcc_8_3_1_cuda_11:
  variables:
    SPEC: "${PROJECT_LASSEN_VARIANTS} +cuda tests=none %xl@16.1.1.10 cxxflags=\"--gcc-toolchain=/usr/tce/packages/gcc/gcc-8.3.1\" cflags=\"--gcc-toolchain=/usr/tce/packages/gcc/gcc-8.3.1\" ^cuda@11.0.2 ${PROJECT_LASSEN_DEPS}"
  extends: .build_and_test_on_lassen

status_success:
  extends: [.on_lassen]
  stage: status_update
  script:
    - export pipeline_status="success"
    - *status_report
  when: on_success

status_failure:
  extends: [.on_lassen]
  stage: status_update
  script:
    - export pipeline_status="failure"
    - *status_report
  when: on_failure

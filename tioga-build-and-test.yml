##############################################################################
# Copyright (c) 2022, Lawrence Livermore National Security, LLC and RADIUSS
# project contributors. See the COPYRIGHT file for details.
#
# SPDX-License-Identifier: (MIT)
##############################################################################

stages:
  - is-machine-up
  - allocate_resources
  - build_and_test
  - release_resources

##############################################################################
# UTILITIES
.on_tioga:
  tags:
    - shell
    - tioga11
  rules:
    # Runs except if we explicitly deactivate tioga by variable.
    - if: '$ON_TIOGA == "OFF"'
      when: never
    # Advanced jobs can only run on master, develop or if ALL_TARGETS is ON.
    # Set ADVANCED_JOB to ON in the job definition to make it an advanced job.
    - if: '$ADVANCED_JOB == "ON" && $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != "develop" && $ALL_TARGETS != "ON"'
      when: never
    # We should always release resources allocated in the pipeline.
    - if: '$CI_JOB_NAME =~ /release_resources/'
      when: always
    # Only report failure if the pipeline failed.
    - if: '$CI_JOB_NAME =~ /status_failure/'
      when: on_failure
    # A true statement is expected to allow jobs to run. Here is the default.
    - when: on_success

.status_report: &status_report
    - export context="tioga"
    - |
      curl --url "https://api.github.com/repos/${GITHUB_PROJECT_ORG}/${GITHUB_PROJECT_NAME}/statuses/${CI_COMMIT_SHA}" \
           --header 'Content-Type: application/json' \
           --header "authorization: Bearer ${GITHUB_TOKEN}" \
           --data "{ \"state\": \"${pipeline_status}\", \"target_url\": \"${CI_PIPELINE_URL}\", \"description\": \"GitLab ${context} pipeline\", \"context\": \"ci/gitlab/${context}\" }"

.print_tioga_reproducer: &print_tioga_reproducer
    - |
      echo -e "\e[7;32m### Tioga reproducer\e[0m"
      if [[ -n "${LLNL_SERVICE_USER}" ]]; then echo -e "xsu ${LLNL_SERVICE_USER}"; fi
      echo -e "
      working_dir=\"/usr/workspace/\${USER}/${GITHUB_PROJECT_NAME}/${CI_COMMIT_REF_NAME//\//-}-${CI_PIPELINE_ID}-\$(date +%s)\"
      mkdir -p \${working_dir} && cd \${working_dir} \n
      git clone https://github.com/${GITHUB_PROJECT_ORG}/${GITHUB_PROJECT_NAME}.git --single-branch --depth=1 \n
      cd ${GITHUB_PROJECT_NAME}
      git fetch origin --depth=1 ${CI_COMMIT_SHA} \n
      git checkout ${CI_COMMIT_SHA} \n
      git submodule update --init --recursive \n
      SPEC=\"${SPEC//\"/\\\"}\" flux mini run ${TIOGA_BUILD_AND_TEST_JOB_ALLOC} ${BUILD_AND_TEST_CMD}"
      echo -e "\e[7;32m### End of reproducer\e[0m"

.build_and_test_on_tioga:
  extends: [.custom_build_and_test, .on_tioga]
  stage: build_and_test
  script:
    # Allocation information
    - |
      echo ${ALLOC_NAME}
      URI=$(flux jobs -o "{uri} {name}" | grep ${ALLOC_NAME} | awk '{print $1}') || echo "Empty URI"
      echo ${URI}
      if [[ -n "$URI" ]]; then export FLUX_URI=$URI; fi
    # Print a reproducer
    - *print_tioga_reproducer
    # The actual launch command
    - flux mini run ${TIOGA_BUILD_AND_TEST_JOB_ALLOC} ${BUILD_AND_TEST_CMD}

##############################################################################
# JOBS
is-machine-up-check:
  stage: is-machine-up
  tags: [shell, oslic]
  variables:
    GIT_STRATEGY: none
  script:
    - |
      if [[ $(jq '.tioga.total_nodes_up' /usr/global/tools/lorenz/data/loginnodeStatus) == 0 ]]
      then
        echo -e "\e[31mNo node available on Tioga\e[0m"
        curl --url "https://api.github.com/repos/${GITHUB_PROJECT_ORG}/${GITHUB_PROJECT_NAME}/statuses/${CI_COMMIT_SHA}" \
             --header 'Content-Type: application/json' \
             --header "authorization: Bearer ${GITHUB_TOKEN}" \
             --data "{ \"state\": \"failure\", \"target_url\": \"${CI_PIPELINE_URL}\", \"description\": \"GitLab Tioga Down\", \"context\": \"ci/gitlab/tioga\" }"
        exit 1
      fi

# In pre-build phase, allocate a node for builds.
allocate_resources:
  variables:
    GIT_STRATEGY: none
  extends: .on_tioga
  stage: allocate_resources
  script:
    - |
      set -x
      echo "Shared allocation disabled: runs slowly, needs a fix"
      #flux mini batch ${TIOGA_BUILD_AND_TEST_SHARED_ALLOC} --job-name=${ALLOC_NAME} --wrap sleep inf

status_pending:
  extends: .on_tioga
  variables:
    GIT_STRATEGY: none
  stage: allocate_resources
  script:
    - export pipeline_status="pending"
    - *status_report

rocm_5_4_3_clang_15_0_0:
  variables:
    SPEC: "${PROJECT_TIOGA_VARIANTS} +rocm amdgpu_target=gfx90a %clang@15.0.0.rocm.5.4.3 ^hip@5.4.3 ${PROJECT_TIOGA_DEPS}"
  extends: .build_and_test_on_tioga

cce_15_0_1:
  variables:
    SPEC: "${PROJECT_TIOGA_VARIANTS} %cce@15.0.1 ${PROJECT_TIOGA_DEPS}"
  extends: .build_and_test_on_tioga

# In post-build phase, deallocate resources.
# Note : we make sure this is run even on build phase failure using a specific
# rule in the template ".on_tioga".
release_resources:
  variables:
    GIT_STRATEGY: none
  extends: .on_tioga
  stage: release_resources
  script:
    - |
      set -x
      echo "Shared allocation disabled: runs slowly, needs a fix"
      #export JOBID=$(flux jobs -o "{id} {name}" | grep ${ALLOC_NAME} | awk '{print $1}')
      #([[ -n "${JOBID}" ]] && flux job kill ${JOBID})

status_success:
  extends: .on_tioga
  variables:
    GIT_STRATEGY: none
  stage: release_resources
  script:
    - export pipeline_status="success"
    - *status_report
  when: on_success

status_failure:
  extends: .on_tioga
  variables:
    GIT_STRATEGY: none
  stage: release_resources
  script:
    - export pipeline_status="failure"
    - *status_report
  when: on_failure

##############################################################################
# Copyright (c) 2022, Lawrence Livermore National Security, LLC and RADIUSS
# project contributors. See the COPYRIGHT file for details.
#
# SPDX-License-Identifier: (MIT)
##############################################################################

stages:
  - is-machine-up
  - allocate_resources
  - build_and_test
  - release_resources

##############################################################################
# CORONA
# These are templates (.name) that can be included in other jobs to share part
# of the job definition.
.on_corona:
  tags:
    - shell
    - corona
  rules:
    # Runs except if we explicitly deactivate corona by variable.
    - if: '$ON_CORONA == "OFF"'
      when: never
    # Advanced jobs can only run on master, develop or if ALL_TARGETS is ON.
    # Set ADVANCED_JOB to ON in the job definition to make it an advanced job.
    - if: '$ADVANCED_JOB == "ON" && $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != "develop" && $ALL_TARGETS != "ON"'
      when: never
    # We should always release resources allocated in the pipeline.
    - if: '$CI_JOB_NAME =~ /release_resources/'
      when: always
    # Only report failure if the pipeline failed.
    - if: '$CI_JOB_NAME =~ /status_failure/'
      when: on_failure
    # A true statement is expected to allow jobs to run. Here is the default.
    - when: on_success

is-machine-up-check:
  stage: is-machine-up
  tags: [shell, oslic]
  variables:
    GIT_STRATEGY: none
  script:
    - |
      if [[ $(jq '.corona.total_nodes_up' /usr/global/tools/lorenz/data/loginnodeStatus) == 0 ]]
      then
        echo -e "\e[31mNo node available on Corona\e[0m"
        curl --url "https://api.github.com/repos/LLNL/${CI_PROJECT_NAME}/statuses/${CI_COMMIT_SHA}" \
             --header 'Content-Type: application/json' \
             --header "authorization: Bearer ${GITHUB_TOKEN}" \
             --data "{ \"state\": \"failure\", \"target_url\": \"${CI_PIPELINE_URL}\", \"description\": \"GitLab Corona Down\", \"context\": \"ci/gitlab/corona\" }"
        exit 1
      fi

.status_report: &status_report
    - export context="corona"
    - |
      curl --url "https://api.github.com/repos/LLNL/${CI_PROJECT_NAME}/statuses/${CI_COMMIT_SHA}" \
           --header 'Content-Type: application/json' \
           --header "authorization: Bearer ${GITHUB_TOKEN}" \
           --data "{ \"state\": \"${pipeline_status}\", \"target_url\": \"${CI_PIPELINE_URL}\", \"description\": \"GitLab ${context} pipeline\", \"context\": \"ci/gitlab/${context}\" }"

.build_and_test_on_corona:
  extends: [.custom_build_and_test, .on_corona]
  stage: build_and_test
  script:
    - |
      set -x
      echo ${ALLOC_NAME}
      URI=$(flux jobs -o "{uri} {name}" | grep ${ALLOC_NAME} | awk '{print $1}') || echo "Empty URI"
      if [[ -n "$URI" ]]; then export FLUX_URI=$URI; fi
      flux mini run ${CORONA_BUILD_AND_TEST_JOB_ALLOC} scripts/gitlab/build_and_test.sh

# In pre-build phase, allocate a node for builds.
allocate_resources (on corona):
  variables:
    GIT_STRATEGY: none
  extends: .on_corona
  stage: allocate_resources
  script:
    - |
      set -x
      echo "Shared allocation disabled: runs slowly, needs a fix"
      #flux mini batch ${CORONA_BUILD_AND_TEST_SHARED_ALLOC} --job-name=${ALLOC_NAME} --wrap sleep inf

status_pending:
  extends: [.on_corona]
  variables:
    GIT_STRATEGY: none
  stage: allocate_resources
  script:
    - export pipeline_status="pending"
    - *status_report

rocm_5_1_1_clang_13_0_0:
  variables:
    SPEC: "${PROJECT_CORONA_VARIANTS} +rocm amdgpu_target=gfx906 %clang@13.0.0 ^hip@5.1.1 ${PROJECT_CORONA_DEPS}"
  extends: .build_and_test_on_corona

# In post-build phase, deallocate resources.
# Note : we make sure this is run even on build phase failure using a specific
# rule in the template ".on_corona".
release_resources (on corona):
  variables:
    GIT_STRATEGY: none
  extends: .on_corona
  stage: release_resources
  script:
    - |
      set -x
      echo "Shared allocation disabled: runs slowly, needs a fix"
      #export JOBID=$(flux jobs -o "{id} {name}" | grep ${ALLOC_NAME} | awk '{print $1}')
      #([[ -n "${JOBID}" ]] && flux job kill ${JOBID})

status_success:
  extends: [.on_corona]
  variables:
    GIT_STRATEGY: none
  stage: release_resources
  script:
    - export pipeline_status="success"
    - *status_report

status_failure:
  extends: [.on_corona]
  variables:
    GIT_STRATEGY: none
  stage: release_resources
  script:
    - export pipeline_status="failure"
    - *status_report

##############################################################################
# Copyright (c) 2022-23, Lawrence Livermore National Security, LLC and RADIUSS
# project contributors. See the COPYRIGHT file for details.
#
# SPDX-License-Identifier: (MIT)
##############################################################################

# Sets ID tokens for every job using `default:`
include:
  - project: 'lc-templates/id_tokens'
    file: 'id_tokens.yml'

stages:
  - is-machine-up
  - allocate-resources
  - jobs-stage-1
  - jobs-stage-2
  - jobs-stage-3
  - release-resources

##############################################################################
# UTILITIES
.on_tioga:
  tags:
    - shell
    - tioga
  rules:
    # Runs except if we explicitly deactivate tioga by variable.
    - if: '$ON_TIOGA == "OFF"'
      when: never
    # Advanced jobs can only run on master, develop or if ALL_TARGETS is ON.
    # Set ADVANCED_JOB to ON in the job definition to make it an advanced job.
    - if: '$ADVANCED_JOB == "ON" && $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != "develop" && $ALL_TARGETS != "ON"'
      when: never
    # We should always release resources allocated in the pipeline.
    - if: '$CI_JOB_NAME =~ /release_resources/'
      when: always
    # A true statement is expected to allow jobs to run. Here is the default.
    - when: on_success

.tioga_reproducer_init:
  script:
    - |
      echo -e "\e[7;32m### CI job ${CI_JOB_ID} reproducer on tioga (${SYS_TYPE}) \e[0m"
      if [[ -n "${LLNL_SERVICE_USER}" ]]; then echo -e "xsu ${LLNL_SERVICE_USER}"; fi
      echo -e "
      working_dir=\"/usr/workspace/\${USER}/${GITHUB_PROJECT_NAME}/${CI_JOB_ID}-\$(date +%s)\" \n
      mkdir -p \${working_dir} && cd \${working_dir} \n
      git clone https://github.com/${GITHUB_PROJECT_ORG}/${GITHUB_PROJECT_NAME}.git --single-branch --depth=1 \n
      cd ${GITHUB_PROJECT_NAME} \n
      git fetch origin --depth=1 ${CI_COMMIT_SHA} \n
      git checkout ${CI_COMMIT_SHA} \n
      git submodule update --init --recursive \n"

# We require project to define their job command using a variable (JOB_CMD).
# In customization/gitlab-ci.yml, we encourage to define this variable as
# non-expandable, so that project can use nested variables to configure the job
# command. The caveat is that the reproducer here cannot capture the
# definition of these variables in a generic fashion. By overriding the
# following section, projects can specify the variables to define in the
# reproducer to exactly reproduce the CI build.
.tioga_reproducer_vars:
  script:
    - |
      echo -e "# Define project specific variables here if any."
      #echo -e "export <CUSTOM_VAR>=\"${<CUSTOM_VAR>}\""

.tioga_reproducer_job:
  script:
    - |
      echo -e "flux watch \$(flux batch -o output.stdout.type=kvs ${TIOGA_JOB_ALLOC} ${JOB_CMD})"
      echo -e "\e[7;32m### End of reproducer\e[0m"

.tioga_job_command:
  script:
    - ${PROXY} flux watch $( ${PROXY} flux batch -o output.stdout.type=kvs ${TIOGA_JOB_ALLOC} ${JOB_CMD})

.job_on_tioga:
  extends: [.custom_job, .on_tioga]
  stage: jobs-stage-1
  script:
    # Allocation information
    - |
      ALLOC_ID=$(flux jobs --name="${ALLOC_NAME}" -n -o "{id}")
      echo -e "[Information]: Shared allocation ID = ${ALLOC_ID}"
      PROXY="$( [[ -n "${ALLOC_ID}" ]] && echo "flux proxy ${ALLOC_ID}" || echo "" )"
    # Print a reproducer
    - !reference [.tioga_reproducer_init, script]
    - !reference [.tioga_reproducer_vars, script]
    - !reference [.tioga_reproducer_job, script]
    # The actual launch command
    - !reference [.tioga_job_command, script]

##############################################################################
# JOBS

# In pre-build phase, allocate a node for builds.
allocate_resources:
  variables:
    GIT_STRATEGY: none
  extends: .on_tioga
  stage: allocate-resources
  script:
    - |
      set -x
      flux --parent alloc ${TIOGA_SHARED_ALLOC} --job-name=${ALLOC_NAME} --bg

# In post-build phase, deallocate resources.
# Note : we make sure this is run even on build phase failure using a specific
# rule in the template ".on_tioga".
release_resources:
  variables:
    GIT_STRATEGY: none
  extends: .on_tioga
  stage: release-resources
  script:
    - |
      set -x
      export URI=$(flux jobs -o "{id} {name}" | grep ${ALLOC_NAME} | awk '{print $1}')
      ([[ -n "${URI}" ]] && flux job kill ${URI} || exit 0)

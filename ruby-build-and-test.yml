##############################################################################
# Copyright (c) 2022, Lawrence Livermore National Security, LLC and RADIUSS
# project contributors. See the COPYRIGHT file for details.
#
# SPDX-License-Identifier: (MIT)
##############################################################################

stages:
  - allocate_resources
  - build_and_test
  - release_resources

##############################################################################
# RUBY
.on_ruby:
  tags:
    - shell
    - ruby
  rules:
    # Runs except if we explicitly deactivate corona by variable.
    - if: '$ON_RUBY == "OFF"'
      when: never
    # Advanced jobs can only run on master, develop or if ALL_TARGETS is ON.
    # Set ADVANCED_JOB to ON in the job definition to make it an advanced job.
    - if: '$ADVANCED_JOB == "ON" && $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != "develop" && $ALL_TARGETS != "ON"'
      when: never
    # We should always release resources allocated in the pipeline.
    - if: '$CI_JOB_NAME =~ /release_resources/'
      when: always
    # Only report failure if the pipeline failed.
    - if: '$CI_JOB_NAME =~ /status_failure/'
      when: on_failure
    # A true statement is expected to allow jobs to run. Here is the default.
    - when: on_success

.status_report: &status_report
    - export context="ruby"
    - curl --url "https://api.github.com/repos/LLNL/${CI_PROJECT_NAME}/statuses/${CI_COMMIT_SHA}" \
           --header 'Content-Type: application/json' \
           --header "authorization: Bearer ${GITHUB_TOKEN}" \
           --data "{ \"state\": \"${pipeline_status}\", \"target_url\": \"${CI_PIPELINE_URL}\", \"description\": \"GitLab ${context} pipeline\", \"context\": \"ci/gitlab/${context}\" }"

.build_and_test_on_ruby:
  extends: [.custom_build_and_test, .on_ruby]
  stage: build_and_test
  script:
    - echo ${ALLOC_NAME}
    - export JOBID=$(squeue -h --name=${ALLOC_NAME} --format=%A)
    - echo ${JOBID}
    - srun $( [[ -n "${JOBID}" ]] && echo "--jobid=${JOBID}" ) ${RUBY_BUILD_AND_TEST_JOB_ALLOC} scripts/gitlab/build_and_test.sh
  variables:
    SLURM_OVERLAP: 1

# In pre-build phase, allocate a node for builds.
# TODO: make the resource configurable, not all projects will want the same.
allocate_resources (on ruby):
  variables:
    GIT_STRATEGY: none
  extends: .on_ruby
  stage: allocate_resources
  script:
    - salloc ${RUBY_BUILD_AND_TEST_SHARED_ALLOC} --no-shell --job-name=${ALLOC_NAME}

status_pending:
  extends: [.on_ruby]
  stage: allocate_resources
  script:
    - export pipeline_status="pending"
    - *status_report

# Gitlab jobs for the Ruby machine at LLNL.
clang_10:
  variables:
    SPEC: "%clang@10.0.1"
  extends: .build_and_test_on_ruby

clang_9:
  variables:
    SPEC: "%clang@9.0.0"
  extends: .build_and_test_on_ruby

gcc_8_1_0:
  variables:
    SPEC: "%gcc@8.1.0"
  extends: .build_and_test_on_ruby

icpc_19_1_0:
  variables:
    SPEC: "%intel@19.1.0"
  extends: .build_and_test_on_ruby

pgi_20_1:
  variables:
    SPEC: "%pgi@20.1 cxxflags\"=-rc=/usr/workspace/umpire/pgi/x86_64/local-gcc-8.3.1-rc\" cflags\"=-rc=/usr/workspace/umpire/pgi/x86_64/local-gcc-8.3.1-rc\" fflags=\"-rc=/usr/workspace/umpire/pgi/x86_64/local-gcc-8.3.1-rc\""
  extends: .build_and_test_on_ruby

# In post-build phase, deallocate resources.
# Note : we make sure this is run even on build phase failure using a specific
# rule in the template ".on_ruby".
release_resources (on ruby):
  variables:
    GIT_STRATEGY: none
  extends: .on_ruby
  stage: release_resources
  script:
    - export JOBID=$(squeue -h --name=${ALLOC_NAME} --format=%A)
    - ([[ -n "${JOBID}" ]] && scancel ${JOBID})

status_success:
  extends: [.on_ruby]
  stage: release_resources
  script:
    - export pipeline_status="success"
    - *status_report
  when: on_success

status_failure:
  extends: [.on_ruby]
  stage: release_resources
  script:
    - export pipeline_status="failure"
    - *status_report
  when: on_failure

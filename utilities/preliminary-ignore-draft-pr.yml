###############################################################################
# Copyright (c) 2022-23, Lawrence Livermore National Security, LLC and RADIUSS
# project contributors. See the RAJA/LICENSE file for details.
#
# SPDX-License-Identifier: (BSD-3-Clause)
###############################################################################

# This file is optional, only include it in your CI (see
# customization/gitlab-ci.yml) if you want to skip the CI on draft branches.

# Requirements:
# The following variables must be defined:
# - GITHUB_TOKEN (granted in radiuss group)
# - GITHUB_PROJECT_NAME
# - GITHUB_PROJECT_ORG

# This job should fail if we donâ€™t want the pipeline to run.
# Here, we make sure the pipeline fails if the PR is a draft.
ignore-draft-pr:
  stage: .pre
  tags: [shell, oslic]
  variables:
    GIT_STRATEGY: none
  script:
    - |
      # Create a pattern of branch names on which we always run.
      # Note: the pattern can be overridden setting ALWAYS_RUN_PATTERN.
      always_run_pattern="${ALWAYS_RUN_PATTERN:-"^develop$|^main$|^master$|^v[0-9.]*$"}"
      # If the current branch is not in the always run pattern
      echo ""
      echo "### Draft filter parameters ###"
      echo "# CI_COMMIT_BRANCH = ${CI_COMMIT_BRANCH}"
      echo "# ALWAYS_RUN_PATTERN = ${ALWAYS_RUN_PATTERN}"
      echo "# CI_COMMIT_SHA = ${CI_COMMIT_SHA}"
      echo ""
      description="GitLab: Pull Request vetted for testing"
      status="success"
      return_code=0
      if [[ ! "${CI_COMMIT_BRANCH}" =~ ${always_run_pattern} ]];
      then
          curl --header "authorization: Bearer ${GITHUB_TOKEN}" -X POST -d " \
          { \
            \"query\": \"query { \
                                 repository(name: \\\"${GITHUB_PROJECT_NAME}\\\", owner: \\\"${GITHUB_PROJECT_ORG}\\\") { \
                                   pullRequests(last: 1, headRefName: \\\"${CI_COMMIT_BRANCH}\\\") { \
                                     nodes { \
                                       number, \
                                       isDraft \
                                     } \
                                   } \
                                 } \
                              }\" \
          } \
          " https://api.github.com/graphql > data.json 2> /dev/null
          if $(jq '.data.repository.pullRequests.nodes[].isDraft' data.json)
          then
              description="GitLab: skipped draft Pull Request"
              status="failure"
              return_code=1
          fi
      fi
      curl --url "https://api.github.com/repos/${GITHUB_PROJECT_ORG}/${GITHUB_PROJECT_NAME}/statuses/${CI_COMMIT_SHA}" \
           --header 'Content-Type: application/json' \
           --header "authorization: Bearer ${GITHUB_TOKEN}" \
           --data "{ \"state\": \"${status}\", \"target_url\": \"${CI_PIPELINE_URL}\", \"description\": \"${description}\", \"context\": \"ci/gitlab/skipped-draft-pr\" }"
      exit ${return_code}
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
      when: never
    - when: on_success

###############################################################################
# Copyright (c) 2022-25, Lawrence Livermore National Security, LLC and RADIUSS
# project contributors. See the RAJA/LICENSE file for details.
#
# SPDX-License-Identifier: (BSD-3-Clause)
###############################################################################

# This file is optional, only include it in your CI (see
# customization/gitlab-ci.yml) if you want to skip the CI on draft branches.

# Requirements:
# The following variables must be defined:
# - GITHUB_TOKEN (granted in radiuss group)
# - GITHUB_PROJECT_NAME
# - GITHUB_PROJECT_ORG

# This job should fail if we donâ€™t want the pipeline to run.
# Here, we make sure the pipeline fails if the PR is a draft.
ignore-draft-pr:
  stage: .pre
  tags: [shell, oslic]
  variables:
    GIT_STRATEGY: none
  script:
    - |
      # Create a pattern of branch names on which we always run.
      # Note: the pattern can be overridden setting ALWAYS_RUN_PATTERN.
      always_run_pattern="${ALWAYS_RUN_PATTERN:-"^develop$|^main$|^master$|^v[0-9.]*$"}"
      # If the current branch is not in the always run pattern
      echo ""
      echo "### Draft filter parameters ###"
      echo "# CI_COMMIT_BRANCH = ${CI_COMMIT_BRANCH}"
      echo "# ALWAYS_RUN_PATTERN = ${ALWAYS_RUN_PATTERN}"
      echo "# CI_COMMIT_SHA = ${CI_COMMIT_SHA}"
      echo ""
      description="GitLab: Pull Request vetted for testing"
      status="success"
      return_code=0
      
      # CI_COMMIT_BRANCH is only empty for tags, we always run CI on tags.
      if [[ ! "${CI_COMMIT_BRANCH}" =~ ${always_run_pattern} && -n "${CI_COMMIT_BRANCH}" ]];
      then
          # Check if required variables are set
          if [ -z "$GITHUB_TOKEN" ] || [ -z "$GITHUB_PROJECT_ORG" ] || [ -z "$GITHUB_PROJECT_NAME" ]; then
            echo "Error: Required GitHub variables not set"
            exit 1
          fi
          
          # Query GitHub GraphQL API with error handling
          GRAPHQL_RESPONSE=$(mktemp)
          GRAPHQL_HTTP_CODE=$(curl --retry 3 --retry-delay 5 --max-time 30 \
              --header "authorization: Bearer ${GITHUB_TOKEN}" \
              --header "Content-Type: application/json" \
              -X POST \
              --data "{ \"query\": \"query { repository(name: \\\"${GITHUB_PROJECT_NAME}\\\", owner: \\\"${GITHUB_PROJECT_ORG}\\\") { pullRequests(last: 1, headRefName: \\\"${CI_COMMIT_BRANCH}\\\") { nodes { number, isDraft } } } }\" }" \
              --output "$GRAPHQL_RESPONSE" \
              --write-out "%{http_code}" \
              --silent \
              --show-error \
              https://api.github.com/graphql)
          
          echo "GitHub GraphQL API response code: $GRAPHQL_HTTP_CODE"
          
          if [ "$GRAPHQL_HTTP_CODE" -eq 200 ]; then
            echo "Successfully queried GitHub API"
            # Check if the response contains valid data
            if ! jq -e '.data.repository.pullRequests.nodes[0]' "$GRAPHQL_RESPONSE" > /dev/null 2>&1; then
              echo "Warning: No pull request found for branch ${CI_COMMIT_BRANCH}"
            elif $(jq '.data.repository.pullRequests.nodes[0].isDraft' "$GRAPHQL_RESPONSE"); then
              description="GitLab: skipped draft Pull Request"
              status="failure"
              return_code=1
              echo "Pull Request is in draft state, skipping CI"
            else
              echo "Pull Request is not a draft, proceeding with CI"
            fi
          else
            echo "Failed to query GitHub GraphQL API. HTTP status: $GRAPHQL_HTTP_CODE"
            echo "Response body:"
            cat "$GRAPHQL_RESPONSE"
            rm -f "$GRAPHQL_RESPONSE"
            exit 1
          fi
          
          rm -f "$GRAPHQL_RESPONSE"
      fi
      
      # Report status to GitHub with error handling
      STATUS_RESPONSE=$(mktemp)
      STATUS_HTTP_CODE=$(curl --retry 3 --retry-delay 5 --max-time 30 \
          --url "https://api.github.com/repos/${GITHUB_PROJECT_ORG}/${GITHUB_PROJECT_NAME}/statuses/${CI_COMMIT_SHA}" \
          --header 'Content-Type: application/json' \
          --header "authorization: Bearer ${GITHUB_TOKEN}" \
          --data "{ \"state\": \"${status}\", \"target_url\": \"${CI_PIPELINE_URL}\", \"description\": \"${description}\", \"context\": \"ci/gitlab/skipped-draft-pr\" }" \
          --output "$STATUS_RESPONSE" \
          --write-out "%{http_code}" \
          --silent \
          --show-error)
      
      echo "GitHub Status API response code: $STATUS_HTTP_CODE"
      
      if [ "$STATUS_HTTP_CODE" -eq 201 ]; then
        echo "Successfully reported status to GitHub"
      else
        echo "Failed to report status to GitHub. HTTP status: $STATUS_HTTP_CODE"
        echo "Response body:"
        cat "$STATUS_RESPONSE"
        rm -f "$STATUS_RESPONSE"
        exit 1
      fi
      
      rm -f "$STATUS_RESPONSE"
      exit ${return_code}
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
      when: never
    - when: on_success
